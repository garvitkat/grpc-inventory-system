# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import services.inventory_pb2 as inventory__pb2


class AddOneServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addOne = channel.unary_unary(
                '/AddOneService/addOne',
                request_serializer=inventory__pb2.Number.SerializeToString,
                response_deserializer=inventory__pb2.Number.FromString,
                )


class AddOneServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AddOneServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addOne': grpc.unary_unary_rpc_method_handler(
                    servicer.addOne,
                    request_deserializer=inventory__pb2.Number.FromString,
                    response_serializer=inventory__pb2.Number.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AddOneService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AddOneService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AddOneService/addOne',
            inventory__pb2.Number.SerializeToString,
            inventory__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BookServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addBook = channel.unary_unary(
                '/BookService/addBook',
                request_serializer=inventory__pb2.Book.SerializeToString,
                response_deserializer=inventory__pb2.ResultAddBook.FromString,
                )
        self.getBook = channel.unary_unary(
                '/BookService/getBook',
                request_serializer=inventory__pb2.BookIsbn.SerializeToString,
                response_deserializer=inventory__pb2.Book.FromString,
                )


class BookServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addBook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BookServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addBook': grpc.unary_unary_rpc_method_handler(
                    servicer.addBook,
                    request_deserializer=inventory__pb2.Book.FromString,
                    response_serializer=inventory__pb2.ResultAddBook.SerializeToString,
            ),
            'getBook': grpc.unary_unary_rpc_method_handler(
                    servicer.getBook,
                    request_deserializer=inventory__pb2.BookIsbn.FromString,
                    response_serializer=inventory__pb2.Book.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BookService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BookService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BookService/addBook',
            inventory__pb2.Book.SerializeToString,
            inventory__pb2.ResultAddBook.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BookService/getBook',
            inventory__pb2.BookIsbn.SerializeToString,
            inventory__pb2.Book.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
